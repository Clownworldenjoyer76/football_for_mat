name: build-train-commit

on:
  # run manually from the Actions tab
  workflow_dispatch:
  # run automatically every Friday 10:00 UTC (change cron if you prefer)
  schedule:
    - cron: "0 10 * * FRI"

permissions:
  contents: write

concurrency:
  group: build-train-commit-${{ github.ref }}
  cancel-in-progress: false

env:
  PYTHONUTF8: "1"
  TZ: "UTC"

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Enrich features (optional)
        run: |
          if [ -f scripts/02b_enrich_features.py ]; then
            python scripts/02b_enrich_features.py
          else
            echo "No scripts/02b_enrich_features.py; skipping."
          fi

      - name: Train models
        run: python scripts/03_train_models.py

      - name: Build models manifest (with metadata)
        run: python scripts/build_models_manifest.py

      - name: Validate manifest is populated
        run: |
          python - <<'PY'
          import sys, pandas as pd, os
          p = "models/manifest/models_manifest.csv"
          if not os.path.exists(p):
              print(f"ERROR: {p} not found.", file=sys.stderr); sys.exit(1)
          df = pd.read_csv(p)
          need = ["path","filename","sha256","target","version_tag"]
          miss = [c for c in need if c not in df.columns]
          if miss or df.empty or not df["target"].fillna("").str.len().gt(0).any():
              print("ERROR: manifest invalid or empty.", file=sys.stderr); sys.exit(1)
          print("OK: manifest valid.")
          PY

      - name: Show key outputs
        run: |
          sed -n '1,25p' output/models/metrics_summary.csv || true
          sed -n '1,25p' models/manifest/models_manifest.csv || true
          ls -lh models/pregame || true

      - name: Ensure .gitignore excludes joblibs
        run: |
          if [ -f .gitignore ]; then
            if ! grep -q "^models/pregame/.*\.joblib$" .gitignore; then
              echo "models/pregame/*.joblib" >> .gitignore
            fi
          else
            echo "models/pregame/*.joblib" > .gitignore
          fi

      - name: Commit lightweight outputs (manifest/metrics/logs only)
        run: |
          set -e
          git config user.name  "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add .gitignore models/manifest/* || true
          git add output/models/metrics_summary.csv || true
          git add output/logs/*.log || true
          if ! git diff --cached --quiet; then
            git commit -m "Pipeline ${{ github.run_id }}: manifest, metrics, logs"
            git push
          else
            echo "No lightweight changes to commit."
          fi

      - name: Upload model artifacts (90-day retention)
        uses: actions/upload-artifact@v4
        with:
          name: models-pregame-${{ github.run_id }}
          path: models/pregame/*.joblib
          if-no-files-found: warn
          retention-days: 90

      - name: Create or update 'latest-models' release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest-models
          name: Latest Models
          prerelease: true
          files: |
            models/pregame/*.joblib
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create immutable run release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: models-${{ github.run_number }}
          name: Models Run ${{ github.run_number }}
          prerelease: true
          files: |
            models/pregame/*.joblib
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
