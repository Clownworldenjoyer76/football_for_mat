name: NFL Props Pipeline

on:
  workflow_dispatch:
    inputs:
      pull_odds:
        description: "Pull odds via API (if script present)? 1=yes, 0=no"
        required: true
        default: "0"
      forecast_season:
        description: "Pregame season (e.g., 2025) — leave blank to skip"
        required: false
        default: ""
      forecast_week:
        description: "Pregame week (e.g., 1) — leave blank to skip"
        required: false
        default: ""

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: America/New_York
      PULL_ODDS: ${{ github.event.inputs.pull_odds }}
      FORECAST_SEASON: ${{ github.event.inputs.forecast_season }}
      FORECAST_WEEK: ${{ github.event.inputs.forecast_week }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Python deps
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "Deps installed OK"

      # ---------- Step 01 ----------
      - name: Step 01 — Pull/canonicalize (if present)
        run: |
          set -euo pipefail
          if [ -f scripts/01_pull_nflverse.py ]; then
            python scripts/01_pull_nflverse.py
          else
            echo "scripts/01_pull_nflverse.py not found — skipping"
          fi

      # ---------- Step 02 ----------
      - name: Step 02 — Build features (if present)
        run: |
          set -euo pipefail
          if [ -f scripts/02_build_features.py ]; then
            python scripts/02_build_features.py
          else
            echo "scripts/02_build_features.py not found — skipping"
          fi

      # ---------- Step 03 ----------
      - name: Step 03 — Train models (if present)
        run: |
          set -euo pipefail
          if [ -f scripts/03_train_models.py ]; then
            python scripts/03_train_models.py
          else
            echo "scripts/03_train_models.py not found — skipping"
          fi

      # ---------- Step 04 ----------
      - name: Step 04 — Pregame predictions (if present)
        run: |
          set -euo pipefail
          if [ -f scripts/04_predict_pregame.py ]; then
            python scripts/04_predict_pregame.py --season "${FORECAST_SEASON}" --week "${FORECAST_WEEK}"
          else
            echo "scripts/04_predict_pregame.py not found — skipping"
          fi

      # ---------- Always write a compact run summary ----------
      - name: Finalize log
        if: always()
        run: |
          set -euo pipefail
          mkdir -p output/logs
          LOG="output/logs/summary_${GITHUB_RUN_ID}.log"
          {
            echo "RUN_ID: ${GITHUB_RUN_ID}"
            echo "REPO:   ${GITHUB_REPOSITORY}"
            echo "BRANCH: ${GITHUB_REF_NAME}"
            echo "TIME:   $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            echo "SEASON: ${FORECAST_SEASON}"
            echo "WEEK:   ${FORECAST_WEEK}"
            echo "PULL_ODDS: ${PULL_ODDS}"
            echo "----------------------------------------"
            echo "Workspace listing (top-level):"
            ls -alh
            echo "----------------------------------------"
            # Tiny file stats (do not fail if missing)
            for f in \
              data/features/weekly_clean.csv.gz \
              output/models/metrics_summary.csv \
              output/predictions/pregame/predictions_all.csv.gz \
              data/predictions/pregame/predictions_all.csv.gz
            do
              if [ -f "$f" ]; then
                echo "FOUND: $f ($(du -h "$f" | cut -f1"))"
              else
                echo "MISS:  $f"
              fi
            done
            echo "----------------------------------------"
            echo "JOB STATUS (so far): ${{ job.status }}"
          } > "$LOG"
          echo "Wrote $LOG"

      - name: Upload log artifact (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: run-logs-${{ github.run_id }}
          path: output/logs/summary_${{ github.run_id }}.log
          if-no-files-found: warn
          compression-level: 6
          retention-days: 7

      # ---------- Commit outputs to repo (robust) ----------
      - name: Commit outputs to repo (robust)
        if: always()
        env:
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          set -euo pipefail

          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Stage generated content (force-include ignored paths)
          git add -A -f data/raw/nflverse || true
          git add -A -f data/features || true
          git add -A -f models/pregame || true
          git add -A -f data/predictions || true
          git add -A -f output || true

          if git diff --staged --quiet; then
            echo "Nothing to commit; skipping push."
            exit 0
          fi

          git commit -m "CI: add generated outputs (run ${GITHUB_RUN_ID})"

          # Push with retry; if rejected or 408, fetch and pull with autostash (merge, no rebase)
          attempt=1
          while [ $attempt -le 5 ]; do
            echo "Push attempt ${attempt}..."
            if git push origin "HEAD:${BRANCH_NAME}"; then
              echo "Push OK"
              exit 0
            fi
            echo "Push failed. Performing fetch + pull (no-rebase, autostash) and retrying..."
            git fetch origin "${BRANCH_NAME}"
            # Avoid the classic: "cannot pull with rebase: You have unstaged changes."
            git pull --no-rebase --autostash origin "${BRANCH_NAME}" || true
            sleep $(( attempt * 5 ))
            attempt=$(( attempt + 1 ))
          done

          echo "ERROR: push failed after retries" >&2
          exit 1
