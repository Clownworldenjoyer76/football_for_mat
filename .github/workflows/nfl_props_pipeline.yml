name: NFL Props Pipeline

on:
  workflow_dispatch:
    inputs:
      pull_odds:
        description: "Pull odds via API (if script present)? 1=yes, 0=no"
        required: true
        default: "0"
      forecast_season:
        description: "Pregame season (e.g., 2025) — leave blank to skip"
        required: false
        default: ""
      forecast_week:
        description: "Pregame week (e.g., 1) — leave blank to skip"
        required: false
        default: ""

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: America/New_York
      PULL_ODDS: ${{ github.event.inputs.pull_odds }}
      FORECAST_SEASON: ${{ github.event.inputs.forecast_season }}
      FORECAST_WEEK: ${{ github.event.inputs.forecast_week }}
      RUN_ID: ${{ github.run_id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python deps
        run: |
          set -e
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pandas==1.5.3 numpy==1.26.4 scikit-learn==1.4.2 lightgbm==4.3.0 xgboost==2.0.3 \
                       scipy==1.10.1 pyarrow==14.0.2 nfl_data_py==0.3.3 pyyaml==6.0.2 requests
          fi
          echo "Deps installed OK"

      # ---------- Step 01: Pull & canonicalize ----------
      - name: Step 01 — Pull/canonicalize (if present)
        run: |
          set -e
          if [ -f scripts/01_pull_nflverse.py ]; then
            python scripts/01_pull_nflverse.py
          else
            echo "scripts/01_pull_nflverse.py not present, skipping"
          fi

      # ---------- Step 02: Build features ----------
      - name: Step 02 — Build features (if present)
        run: |
          set -e
          if [ -f scripts/02_build_features.py ]; then
            python scripts/02_build_features.py
          else
            echo "scripts/02_build_features.py not present, skipping"
          fi

      # ---------- Step 03: Train models ----------
      - name: Step 03 — Train models (if present)
        run: |
          set -e
          if [ -f scripts/03_train_models.py ]; then
            python scripts/03_train_models.py
          else
            echo "scripts/03_train_models.py not present, skipping"
          fi

      # ---------- Step 04: Pregame predictions ----------
      - name: Step 04 — Pregame predictions (if present)
        run: |
          set -e
          if [ -f scripts/04_predict_pregame.py ]; then
            python scripts/04_predict_pregame.py --season "${FORECAST_SEASON}" --week "${FORECAST_WEEK}"
          else
            echo "scripts/04_predict_pregame.py not present, skipping"
          fi

      # ---------- Always create a concise run summary ----------
      - name: Finalize log
        run: |
          set -e
          mkdir -p output/logs
          LOG="output/logs/summary_${RUN_ID}.log"
          {
            echo "RUN_ID: ${RUN_ID}"
            echo "REPO:   ${{ github.repository }}"
            echo "BRANCH: ${{ github.ref_name }}"
            echo "TIME:   $(date -u '+%Y-%m-%d %H:%M:%S') UTC"
            echo "SEASON: ${FORECAST_SEASON}"
            echo "WEEK:   ${FORECAST_WEEK}"
            echo "PULL_ODDS: ${PULL_ODDS}"
            echo "----------------------------------------"
            if [ -f data/features/weekly_clean.csv.gz ]; then
              ROWS=$(python - <<'PY'
import pandas as pd, sys
df = pd.read_csv("data/features/weekly_clean.csv.gz")
print(len(df))
PY
              )
              echo "Features present: data/features/weekly_clean.csv.gz  rows=${ROWS}"
            else
              echo "Features missing: data/features/weekly_clean.csv.gz"
            fi
            if [ -f output/models/metrics_summary.csv ]; then
              echo "Metrics present: output/models/metrics_summary.csv"
            else
              echo "Metrics missing: output/models/metrics_summary.csv"
            fi
            if [ -f output/predictions/pregame/predictions_all.csv.gz ]; then
              echo "Predictions present: output/predictions/pregame/predictions_all.csv.gz"
            else
              echo "Predictions missing (or filtered file name differs)"
            fi
            echo "----------------------------------------"
            echo "JOB STATUS: success"
          } > "${LOG}"
          echo "Wrote ${LOG}"

      # ---------- Upload small logs/artifacts ----------
      - name: Upload log artifact (always)
        uses: actions/upload-artifact@v4
        with:
          name: run-logs-${{ github.run_id }}
          path: |
            output/logs/summary_${{ github.run_id }}.log
            data/features/_build_features_summary.txt
          if-no-files-found: ignore
          retention-days: 14

      # ---------- Upload main outputs (best-effort) ----------
      - name: Upload outputs (best-effort)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: outputs-${{ github.run_id }}
          path: |
            output/models/metrics_summary.csv
            output/predictions/pregame/*.csv.gz
          if-no-files-found: ignore
          retention-days: 14

      # ---------- Commit outputs to repo (no rebase, push directly) ----------
      - name: Commit outputs to repo (robust)
        env:
          GH_USER_NAME: "github-actions[bot]"
          GH_USER_EMAIL: "github-actions[bot]@users.noreply.github.com"
        run: |
          set -e
          git config user.name "$GH_USER_NAME"
          git config user.email "$GH_USER_EMAIL"

          # Ensure directories exist before staging (no error if missing)
          mkdir -p data/features
          mkdir -p models/pregame
          mkdir -p output/models
          mkdir -p output/predictions/pregame
          mkdir -p output/logs

          # Stage desired paths (force include if ignored)
          git add -A -f data/features
          git add -A -f models/pregame
          git add -A -f output/models
          git add -A -f output/predictions/pregame
          git add -A -f output/logs

          # Only commit if there are changes
          if ! git diff --cached --quiet; then
            git commit -m "CI: update outputs (run $RUN_ID)"
            # Push directly; no pull/rebase to avoid conflicts in CI
            git push origin HEAD:main
            echo "Pushed changes to main"
          else
            echo "No changes to commit"
          fi
