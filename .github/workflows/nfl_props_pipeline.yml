name: NFL Props Pipeline

on:
  workflow_dispatch:
    inputs:
      pull_odds:
        description: "Pull odds via API (if script present)? 1=yes, 0=no"
        required: true
        default: "0"
      forecast_season:
        description: "Pregame season (e.g., 2025) — leave blank to skip"
        required: false
        default: ""
      forecast_week:
        description: "Pregame week (e.g., 1) — leave blank to skip"
        required: false
        default: ""

permissions:
  contents: write

jobs:
  run:
    name: run
    runs-on: ubuntu-latest
    env:
      TZ: America/New_York
      PULL_ODDS: ${{ github.event.inputs.pull_odds }}
      FORECAST_SEASON: ${{ github.event.inputs.forecast_season }}
      FORECAST_WEEK: ${{ github.event.inputs.forecast_week }}
      LOG_DIR: output/logs
      LOG_FILE: output/logs/summary_${{ github.run_id }}.log

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Prepare log file
        run: |
          mkdir -p "$LOG_DIR"
          {
            echo "RUN_ID: ${{ github.run_id }}"
            echo "REPO:   ${{ github.repository }}"
            echo "BRANCH: ${{ github.ref_name }}"
            echo "TIME:   $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
            echo "SEASON: ${FORECAST_SEASON}"
            echo "WEEK:   ${FORECAST_WEEK}"
            echo "PULL_ODDS: ${PULL_ODDS}"
            echo "----------------------------------------"
          } > "$LOG_FILE"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Python deps
        run: |
          set -eo pipefail
          python -m pip install --upgrade pip 2>&1 | tee -a "$LOG_FILE"
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt 2>&1 | tee -a "$LOG_FILE"
          else
            pip install pandas numpy nfl_data_py scikit-learn lightgbm scipy requests joblib lxml html5lib 2>&1 | tee -a "$LOG_FILE"
          fi
          echo "Deps installed OK" | tee -a "$LOG_FILE"

      - name: Step 01 — Pull/canonicalize (if present)
        run: |
          set -eo pipefail
          if [ -f scripts/01_pull_nflverse.py ]; then
            echo "[Step01] scripts/01_pull_nflverse.py" | tee -a "$LOG_FILE"
            YEND=$(date +%Y)
            python scripts/01_pull_nflverse.py --start 2024 --end "$YEND" 2>&1 | tee -a "$LOG_FILE"
          elif [ -f scripts/01_pull_nflverse_chunked.py ]; then
            echo "[Step01] scripts/01_pull_nflverse_chunked.py" | tee -a "$LOG_FILE"
            YEND=$(date +%Y)
            python scripts/01_pull_nflverse_chunked.py --start 2024 --end "$YEND" --chunk-years 2 2>&1 | tee -a "$LOG_FILE"
          else
            echo "[Step01] INS UFFICIENT INFORMATION: no Step 01 pull script found" | tee -a "$LOG_FILE"
          fi
          echo "[Step01] DONE" | tee -a "$LOG_FILE"

      - name: Step 02 — Build features (if present)
        run: |
          set -eo pipefail
          if [ -f scripts/02_build_features.py ]; then
            echo "[Step02] scripts/02_build_features.py" | tee -a "$LOG_FILE"
            python scripts/02_build_features.py 2>&1 | tee -a "$LOG_FILE"
          else
            echo "[Step02] INS UFFICIENT INFORMATION: scripts/02_build_features.py missing" | tee -a "$LOG_FILE"
          fi
          echo "[Step02] DONE" | tee -a "$LOG_FILE"

      - name: Step 03 — Train models (if present)
        run: |
          set -eo pipefail
          if [ -f scripts/03_train_models.py ]; then
            echo "[Step03] scripts/03_train_models.py" | tee -a "$LOG_FILE"
            python scripts/03_train_models.py 2>&1 | tee -a "$LOG_FILE"
          else
            echo "[Step03] INS UFFICIENT INFORMATION: scripts/03_train_models.py missing" | tee -a "$LOG_FILE"
          fi
          echo "[Step03] DONE" | tee -a "$LOG_FILE"

      - name: Step 04 — Pregame predictions (if present)
        run: |
          set -eo pipefail
          if [ -f scripts/04_predict_pregame.py ]; then
            echo "[Step04] scripts/04_predict_pregame.py" | tee -a "$LOG_FILE"
            python scripts/04_predict_pregame.py --season "${FORECAST_SEASON}" --week "${FORECAST_WEEK}" 2>&1 | tee -a "$LOG_FILE"
          else
            echo "[Step04] INS UFFICIENT INFORMATION: scripts/04_predict_pregame.py missing" | tee -a "$LOG_FILE"
          fi
          echo "[Step04] DONE" | tee -a "$LOG_FILE"

      - name: Finalize summary
        if: always()
        run: |
          {
            echo "----------------------------------------"
            echo "JOB STATUS: ${{ job.status }}"
            echo "END TIME:   $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          } >> "$LOG_FILE"
          echo "::group::SUMMARY"
          cat "$LOG_FILE"
          echo "::endgroup::"

      - name: Commit summary log (always)
        if: always()
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -f "$LOG_FILE"
          # Use a unique message; skip commit if nothing changed
          git diff --staged --quiet || git commit -m "ci: add summary log for run ${{ github.run_id }}"
          # Push without pull/rebase to avoid conflicts; unique filename prevents clashes
          git push

      - name: Upload summary as artifact (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: run-summary-${{ github.run_id }}
          path: ${{ env.LOG_FILE }}
