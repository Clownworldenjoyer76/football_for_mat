name: NFL Props Pipeline
on:
  workflow_dispatch:
    inputs:
      pull_odds:
        description: "Pull odds via API (if script present)? 1=yes, 0=no"
        required: true
        default: "0"
      forecast_season:
        description: "Pregame season (e.g., 2025) — leave blank to skip"
        required: false
        default: ""
      forecast_week:
        description: "Pregame week (e.g., 1) — leave blank to skip"
        required: false
        default: ""

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: America/New_York
      PULL_ODDS: ${{ github.event.inputs.pull_odds }}
      FORECAST_SEASON: ${{ github.event.inputs.forecast_season }}
      FORECAST_WEEK: ${{ github.event.inputs.forecast_week }}
      RUN_ID: ${{ github.run_id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Ensure folders exist
        run: |
          mkdir -p output/logs output/models output/predictions/pregame data/predictions/pregame models/pregame models/manifest

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pandas numpy nfl_data_py scikit-learn lightgbm xgboost scipy pyarrow pyyaml requests fastparquet joblib lxml html5lib
          fi
          echo "Deps installed OK" | tee -a output/logs/step_install.log

      - name: Step 01 (Pull NFL data and canonicalize)
        run: |
          YEND=$(date +%Y)
          if [ -f scripts/01_pull_nflverse.py ]; then
            python scripts/01_pull_nflverse.py --start 2024 --end "$YEND" 2>&1 | tee -a output/logs/step01.log
          elif [ -f scripts/01_pull_nflverse_chunked.py ]; then
            python scripts/01_pull_nflverse_chunked.py --start 2024 --end "$YEND" --chunk-years 2 2>&1 | tee -a output/logs/step01.log
          else
            echo "ERROR: no Step 01 script found" | tee -a output/logs/step01.log
            exit 1
          fi

      - name: Finalize weekly/rosters tiny artifacts (no network)
        run: |
          python - <<'PY' 2>&1 | tee -a output/logs/step01_finalize.log
          import runpy
          g = runpy.run_path('scripts/01_pull_nflverse.py')
          if 'weekly_canonicalize' in g: g['weekly_canonicalize']()
          if 'rosters_canonicalize' in g: g['rosters_canonicalize']()
          PY

      - name: Step 02 (Build features)
        run: |
          if [ -f scripts/02_build_features.py ]; then
            python scripts/02_build_features.py 2>&1 | tee -a output/logs/step02.log
          else
            echo "ERROR: scripts/02_build_features.py not found" | tee -a output/logs/step02.log
            exit 1
          fi

      - name: Step 02.5 (Debug features)
        run: |
          if [ -f scripts/00_debug_features.py ]; then
            python scripts/00_debug_features.py 2>&1 | tee -a output/logs/step02_5_debug.log
          fi

      - name: Step 03 (Train models)
        run: |
          if [ -f scripts/03_train_models.py ]; then
            python scripts/03_train_models.py 2>&1 | tee -a output/logs/step03.log
          else
            echo "ERROR: scripts/03_train_models.py not found" | tee -a output/logs/step03.log
            exit 1
          fi

      - name: Step 03.5 (Build models manifest)
        run: |
          if [ -f scripts/build_models_manifest.py ]; then
            python scripts/build_models_manifest.py 2>&1 | tee -a output/logs/step_manifest.log
          else
            echo "WARN: scripts/build_models_manifest.py not found — skipping manifest" | tee -a output/logs/step_manifest.log
          fi

      - name: Step 04 (Predict pregame)
        env:
          FORECAST_SEASON: ${{ env.FORECAST_SEASON }}
          FORECAST_WEEK: ${{ env.FORECAST_WEEK }}
        run: |
          if [ -f scripts/04_predict_pregame.py ]; then
            python scripts/04_predict_pregame.py 2>&1 | tee -a output/logs/step04.log
          else
            echo "WARN: scripts/04_predict_pregame.py not found — skipping predictions" | tee -a output/logs/step04.log
          fi

      - name: Write run summary (always)
        if: always()
        run: |
          SUMMARY="output/logs/summary_${RUN_ID}.log"
          {
            echo "RUN_ID: ${RUN_ID}"
            echo "REPO:   ${{ github.repository }}"
            echo "BRANCH: ${{ github.ref_name }}"
            echo "TIME:   $(date -u '+%Y-%m-%d %H:%M:%S') UTC"
            echo "----------------------------------------"
            echo "[Install]  $( [ -f output/logs/step_install.log ] && echo OK || echo N/A )"
            echo "[Step01]   $( [ -f output/logs/step01.log ] && echo OK || echo N/A )"
            echo "[Finalize] $( [ -f output/logs/step01_finalize.log ] && echo OK || echo N/A )"
            echo "[Step02]   $( [ -f output/logs/step02.log ] && echo OK || echo N/A )"
            echo "[Debug]    $( [ -f output/logs/step02_5_debug.log ] && echo OK || echo N/A )"
            echo "[Step03]   $( [ -f output/logs/step03.log ] && echo OK || echo N/A )"
            echo "[Manifest] $( [ -f output/logs/step_manifest.log ] && echo OK || echo N/A )"
            echo "[Step04]   $( [ -f output/logs/step04.log ] && echo OK || echo N/A )"
            echo "----------------------------------------"
            echo "JOB STATUS: ${{ job.status }}"
          } > "${SUMMARY}"
          echo "Summary -> ${SUMMARY}"

      - name: Commit outputs to repo (always)
        if: always()
        env:
          GH_USER_NAME: "github-actions[bot]"
          GH_USER_EMAIL: "github-actions[bot]@users.noreply.github.com"
        run: |
          set -e
          git config user.name "$GH_USER_NAME"
          git config user.email "$GH_USER_EMAIL"
          mkdir -p output/logs output/models output/previews models/manifest
          git add -A -f output/logs
          git add -A -f output/models/metrics_summary.csv
          git add -A -f models/manifest/models_manifest.csv
          git add -A -f models/manifest/models_manifest.lock.json
          if ! git diff --staged --quiet; then
            git commit -m "Pipeline: logs/metrics/manifest"
            git pull --rebase origin ${{ github.ref_name }} || true
            git push
            echo "Committed outputs."
          else
            echo "No changes to commit."
          fi
