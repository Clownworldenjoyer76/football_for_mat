name: NFL Props Pipeline

on:
  workflow_dispatch:
    inputs:
      pull_odds:
        description: "Pull odds via API (if script present)? 1=yes, 0=no"
        required: true
        default: "0"
      forecast_season:
        description: "Pregame season (e.g., 2025) — leave blank to skip"
        required: false
        default: ""
      forecast_week:
        description: "Pregame week (e.g., 1) — leave blank to skip"
        required: false
        default: ""

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
      TZ: America/New_York
      PULL_ODDS: ${{ github.event.inputs.pull_odds }}
      FORECAST_SEASON: ${{ github.event.inputs.forecast_season }}
      FORECAST_WEEK: ${{ github.event.inputs.forecast_week }}
      LOG_DIR: ${{ github.workspace }}/output/logs
      LOG_FILE: ${{ github.workspace }}/output/logs/run-${{ github.run_id }}.txt

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Python deps
        run: |
          set -euo pipefail
          mkdir -p "${LOG_DIR}"
          {
            python -m pip install --upgrade pip
            if [ -f requirements.txt ]; then
              pip install -r requirements.txt
            else
              pip install pandas numpy nfl_data_py scikit-learn lightgbm scipy requests joblib lxml html5lib
            fi
          } |& tee -a "${LOG_FILE}"

      - name: Step 01 — Pull/canonicalize (if present)
        run: |
          set -euo pipefail
          mkdir -p "${LOG_DIR}"
          {
            YEND=$(date +%Y)

            if [ -f scripts/01_pull_nflverse.py ]; then
              echo "== Step 01: scripts/01_pull_nflverse.py ==" 
              python scripts/01_pull_nflverse.py --start 2024 --end "${YEND}"
            elif [ -f scripts/01_pull_nflverse_chunked.py ]; then
              echo "== Step 01: scripts/01_pull_nflverse_chunked.py =="
              python scripts/01_pull_nflverse_chunked.py --start 2024 --end "${YEND}" --chunk-years 2
            else
              echo "Step 01 skipped (no script)"
            fi
          } |& tee -a "${LOG_FILE}"

      - name: Step 02 — Build features (if present)
        run: |
          set -euo pipefail
          {
            if [ -f scripts/02_build_features.py ]; then
              echo "== Step 02: scripts/02_build_features.py =="
              python scripts/02_build_features.py
            else
              echo "Step 02 skipped (scripts/02_build_features.py missing)"
            fi
          } |& tee -a "${LOG_FILE}"

      - name: Step 03 — Train models (if present)
        run: |
          set -euo pipefail
          {
            if [ -f scripts/03_train_models.py ]; then
              echo "== Step 03: scripts/03_train_models.py =="
              python scripts/03_train_models.py
            else
              echo "Step 03 skipped (scripts/03_train_models.py missing)"
            fi
          } |& tee -a "${LOG_FILE}"

      - name: Step 04 — Pregame predictions (if present)
        run: |
          set -euo pipefail
          {
            if [ -f scripts/04_predict_pregame.py ]; then
              echo "== Step 04: scripts/04_predict_pregame.py =="
              python scripts/04_predict_pregame.py \
                --season "${FORECAST_SEASON}" \
                --week "${FORECAST_WEEK}"
            else
              echo "Step 04 skipped (scripts/04_predict_pregame.py missing)"
            fi
          } |& tee -a "${LOG_FILE}"

      # ----- Always write a short summary and tail of the log -----
      - name: Finalize summary log (always)
        if: always()
        run: |
          set -euo pipefail
          mkdir -p "${LOG_DIR}"
          {
            echo "===================="
            echo "Workflow: ${GITHUB_WORKFLOW}"
            echo "Run ID  : ${GITHUB_RUN_ID}"
            echo "Run URL : https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
            echo "Branch  : ${GITHUB_REF_NAME}"
            echo "Commit  : ${GITHUB_SHA}"
            echo "Status  : ${{ job.status }}"
            echo "When    : $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
            echo "===================="
            echo ""
            echo "Last 300 log lines:"
            echo "--------------------"
            if [ -f "${LOG_FILE}" ]; then
              tail -n 300 "${LOG_FILE}"
            else
              echo "(no log captured)"
            fi
          } >> "${LOG_FILE}"

      # ----- Commit logs and any changed outputs back to repo -----
      - name: Commit summary + outputs to repo (always)
        if: always()
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "CI: outputs and run summary (run ${{ github.run_id }}) — status ${{ job.status }}"
          file_pattern: |
            output/logs/**
            output/models/**
            output/predictions/**
            models/pregame/**
            data/raw/nflverse/**
          push_options: '--force-with-lease'

      # Optional: keep a copy of the log as an artifact too
      - name: Upload log artifact (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: run-summary-${{ github.run_id }}
          path: ${{ env.LOG_FILE }}
