name: Best Bets (Selection & Staking)

on:
  workflow_dispatch:
  schedule:
    # Optional: daily 12:00 UTC; adjust or remove as needed
    - cron: "0 12 * * *"

permissions:
  contents: write

jobs:
  best-bets:
    runs-on: ubuntu-latest
    env:
      TZ: America/New_York
      PYTHONUTF8: "1"
      TARGET_SEASON: "2025"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pandas numpy pyarrow fastparquet || true

      # ============================
      # Input verification + season guard
      # ============================
      - name: Verify calibrated props present and season=2025
        run: |
          set -e
          P="data/props/props_current_calibrated.csv"
          if [ ! -s "$P" ]; then
            echo "ERROR: $P missing or empty. Run refresh (season 2025) + build-train-commit first."; exit 1
          fi
          python - <<'PY'
          import os, pandas as pd, sys
          want = int(os.getenv("TARGET_SEASON","2025"))
          p = "data/props/props_current_calibrated.csv"
          df = pd.read_csv(p)
          if "season" not in df.columns:
              print("ERROR: props_current_calibrated.csv missing 'season' column", file=sys.stderr); sys.exit(1)
          mx = int(df["season"].max())
          print("props_current_calibrated.csv max(season)=", mx)
          if mx != want:
              print(f"ERROR: Calibrated props are for season {mx}, not {want}. Run Weekly Data Refresh (season {want}) then build-train-commit.", file=sys.stderr)
              sys.exit(1)
          PY

      # ============================
      # Edge computation
      # ============================
      - name: Compute probability edges
        run: |
          set -e
          if [ -f scripts/06_probability_and_edge.py ]; then
            python scripts/06_probability_and_edge.py
          else
            echo "ERROR: scripts/06_probability_and_edge.py missing"; exit 1
          fi

      - name: Verify edges outputs
        run: |
          set -e
          if [ ! -s "output/edges_summary.csv" ]; then
            echo "ERROR: output/edges_summary.csv missing"; exit 1
          fi
          echo "--- edges_summary.csv (head) ---"
          sed -n '1,20p' output/edges_summary.csv || true

      # ============================
      # Selection & Staking
      # ============================
      - name: Select bets & staking (season 2025)
        run: |
          set -e
          if [ -f scripts/07_select_bets_v2.py ]; then
            python scripts/07_select_bets_v2.py --season "${TARGET_SEASON}"
          else
            echo "ERROR: scripts/07_select_bets_v2.py missing"; exit 1
          fi

      - name: Verify best-bets outputs
        run: |
          set -e
          if ! ls output/*best_bets* >/dev/null 2>&1; then
            echo "ERROR: No best-bets outputs produced in output/"; exit 1
          fi
          for f in output/*best_bets*; do
            echo "---- $f ----"
            sed -n '1,20p' "$f" || true
          done

      # ============================
      # Stamp run timestamp
      # ============================
      - name: Stamp run_ts_utc in outputs
        run: |
          python - <<'PY'
          import glob, pandas as pd
          from datetime import datetime, timezone
          ts = datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%SZ")
          paths = sorted(glob.glob("output/edges*.csv") + glob.glob("output/*best_bets*"))
          changed = 0
          for p in paths:
            try:
              df = pd.read_csv(p)
              df["run_ts_utc"] = ts
              df.to_csv(p, index=False)
              print(f"Stamped run_ts_utc in {p} (rows={len(df)})")
              changed += 1
            except Exception as e:
              print(f"WARNING: could not stamp {p}: {e}")
          if changed == 0:
            raise SystemExit("No outputs found to stamp.")
          PY

      # ============================
      # Commit outputs
      # ============================
      - name: Commit edges + best-bets outputs
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Stage edges + best-bets files
          find output -maxdepth 1 -type f -name 'edges*.csv' -print0 2>/dev/null | xargs -0 -r git add
          find output -maxdepth 1 -type f -name '*best_bets*' -print0 2>/dev/null | xargs -0 -r git add

          if git diff --cached --quiet; then
            echo "No edges/best-bets changes to commit."
            exit 0
          fi

          git commit -m "best-bets: update edges + selections/staking (season ${TARGET_SEASON}, run $GITHUB_RUN_ID)"
          git fetch origin main || true
          git pull --rebase --autostash origin main || true
          git push origin HEAD:main

      # ============================
      # Upload artifacts
      # ============================
      - name: Upload edges + best-bets artifacts (90-day retention)
        uses: actions/upload-artifact@v4
        with:
          name: best-bets-${{ github.run_id }}
          path: |
            output/edges*.csv
            output/*best_bets*
          if-no-files-found: warn
          retention-days: 90
