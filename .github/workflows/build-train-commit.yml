name: build-train-commit

on:
  # run manually from the Actions tab
  workflow_dispatch:
  # run automatically every Wednesday 11:00 UTC ≈ 7:00 AM ET (DST-aware note: cron is UTC)
  schedule:
    - cron: "0 11 * * WED"

permissions:
  contents: write

concurrency:
  group: build-train-commit-${{ github.ref }}
  cancel-in-progress: false

env:
  PYTHONUTF8: "1"
  TZ: "UTC"

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Enrich features (optional)
        run: |
          if [ -f scripts/02b_enrich_features.py ]; then
            python scripts/02b_enrich_features.py
          else
            echo "No scripts/02b_enrich_features.py; skipping."
          fi

      # ============================
      # Train models + manifest
      # ============================
      - name: Train models
        run: python scripts/03_train_models.py

      - name: Build models manifest (with metadata)
        run: python scripts/build_models_manifest.py

      - name: Validate manifest is populated
        run: |
          python - <<'PY'
          import sys, pandas as pd, os
          p = "models/manifest/models_manifest.csv"
          if not os.path.exists(p):
              print(f"ERROR: {p} not found.", file=sys.stderr); sys.exit(1)
          df = pd.read_csv(p)
          need = ["path","filename","sha256","target","version_tag"]
          miss = [c for c in need if c not in df.columns]
          if miss or df.empty or not df["target"].fillna("").str.len().gt(0).any():
              print("ERROR: manifest invalid or empty.", file=sys.stderr); sys.exit(1)
          print("OK: manifest valid.")
          PY

      - name: Show key outputs
        run: |
          sed -n '1,25p' output/models/metrics_summary.csv || true
          sed -n '1,25p' models/manifest/models_manifest.csv || true
          ls -lh models/pregame || true

      # ============================
      # Props generation (optional)
      # ============================
      - name: Generate props (optional)
        run: |
          if [ -f scripts/04_generate_props.py ]; then
            python scripts/04_generate_props.py
          else
            echo "No scripts/04_generate_props.py; skipping."
          fi

      - name: Show props outputs
        run: |
          ls -lh data/props || true
          sed -n '1,20p' data/props/props_current.csv 2>/dev/null || true
          for f in data/props/props_*.csv; do
            [ -f "$f" ] && echo "---- $f ----" && sed -n '1,5p' "$f";
          done

      # ============================
      # Probability calibration (HARD-FAIL if inputs missing)
      # ============================
      - name: Verify historical outcomes present
        run: |
          set -e
          if [ ! -s "data/props/history_props_with_outcomes.csv" ]; then
            echo "ERROR: data/props/history_props_with_outcomes.csv missing or empty. Run finalize-props first."; exit 1
          fi

      - name: Train calibrators (auto-select isotonic/sigmoid) — must produce joblibs
        run: |
          set -e
          if [ -f scripts/05_train_calibrator.py ]; then
            python scripts/05_train_calibrator.py \
              --csv "data/props/history_props_with_outcomes.csv" \
              --method auto \
              --outdir "models/calibration"
          else
            echo "ERROR: scripts/05_train_calibrator.py missing"; exit 1
          fi
          ls -lh models/calibration || true
          # Require at least one joblib written this run
          ls models/calibration/*.joblib >/dev/null 2>&1 || (echo "ERROR: No calibrator joblibs produced"; exit 1)

      - name: Stamp run timestamp into calibration_summary.csv
        run: |
          python - <<'PY'
          import os, pandas as pd
          from datetime import datetime, timezone
          p = "models/calibration/calibration_summary.csv"
          if not os.path.exists(p):
              raise SystemExit("ERROR: calibration_summary.csv not found after training.")
          df = pd.read_csv(p)
          df["run_ts_utc"] = datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%SZ")
          df.to_csv(p, index=False)
          print("Stamped run_ts_utc in calibration_summary.csv")
          PY

      - name: Apply calibrators to current props (must find joblibs)
        run: |
          set -e
          if [ ! -s "data/props/props_current.csv" ]; then
            echo "ERROR: data/props/props_current.csv missing or empty. Generate props first."; exit 1
          fi
          ls models/calibration/*.joblib >/dev/null 2>&1 || (echo "ERROR: No calibrators to apply (models/calibration/*.joblib missing)"; exit 1)
          if [ -f scripts/06_apply_calibrator.py ]; then
            python scripts/06_apply_calibrator.py \
              --csv_in "data/props/props_current.csv" \
              --csv_out "data/props/props_current_calibrated.csv" \
              --calib_dir "models/calibration"
          else
            echo "ERROR: scripts/06_apply_calibrator.py missing"; exit 1
          fi
          sed -n '1,20p' data/props/props_current_calibrated.csv || true

      - name: Stamp run timestamp into props_current_calibrated.csv
        run: |
          python - <<'PY'
          import os, pandas as pd
          from datetime import datetime, timezone
          p = "data/props/props_current_calibrated.csv"
          if not os.path.exists(p):
              raise SystemExit("ERROR: props_current_calibrated.csv not found after apply.")
          df = pd.read_csv(p)
          df["run_ts_utc"] = datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%SZ")
          df.to_csv(p, index=False)
          print("Stamped run_ts_utc in props_current_calibrated.csv")
          PY

      - name: Show calibration outputs
        run: |
          sed -n '1,25p' models/calibration/calibration_summary.csv || true
          sed -n '1,25p' data/props/props_current_calibrated.csv || true
          ls -lh models/calibration || true

      # ============================
      # Git hygiene + commit lightweight artifacts
      # ============================
      - name: Ensure .gitignore excludes joblibs
        run: |
          if [ -f .gitignore ]; then
            grep -q "^models/pregame/.*\.joblib$" .gitignore || echo "models/pregame/*.joblib" >> .gitignore
            grep -q "^models/calibration/.*\.joblib$" .gitignore || echo "models/calibration/*.joblib" >> .gitignore
          else
            printf "models/pregame/*.joblib\nmodels/calibration/*.joblib\n" > .gitignore
          fi

      - name: Commit calibration summary + calibrated props + manifest/metrics/logs
        run: |
          set -e
          git config user.name  "github-actions"
          git config user.email "github-actions@users.noreply.github.com"

          # Always add these if present
          git add .gitignore models/manifest/*               2>/dev/null || true
          git add output/models/metrics_summary.csv          2>/dev/null || true
          git add output/logs/*.log                          2>/dev/null || true

          # Calibration summary + calibrated props
          git add models/calibration/calibration_summary.csv 2>/dev/null || true
          git add data/props/props_current_calibrated.csv    2>/dev/null || true

          if ! git diff --cached --quiet; then
            git commit -m "Pipeline ${{ github.run_id }}: calibration summary + calibrated props + manifest/metrics/logs"
            git fetch origin main || true
            git pull --rebase --autostash origin main || true
            git push
          else
            echo "No lightweight changes to commit."
          fi

      # ============================
      # Upload artifacts & releases
      # ============================
      - name: Upload model artifacts (90-day retention)
        uses: actions/upload-artifact@v4
        with:
          name: models-pregame-${{ github.run_id }}
          path: models/pregame/*.joblib
          if-no-files-found: warn
          retention-days: 90

      - name: Upload calibration artifacts (90-day retention)
        uses: actions/upload-artifact@v4
        with:
          name: models-calibration-${{ github.run_id }}
          path: models/calibration/*.joblib
          if-no-files-found: warn
          retention-days: 90

      - name: Upload best-bets outputs (if any)
        uses: actions/upload-artifact@v4
        with:
          name: best-bets-${{ github.run_id }}
          path: |
            output/*best_bets*
          if-no-files-found: warn
          retention-days: 90
