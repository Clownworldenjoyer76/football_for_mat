name: build-train-commit
true:
  workflow_dispatch: null
  schedule:
  - cron: 0 11 * * WED
permissions:
  contents: write
concurrency:
  group: build-train-commit-${{ github.ref }}
  cancel-in-progress: false
env:
  PYTHONUTF8: '1'
  TZ: UTC
  TARGET_SEASON: '2025'
jobs:
  run:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        lfs: true
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: '${{ runner.os }}-pip-

          '
    - name: Install dependencies
      run: 'python -m pip install -U pip

        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

        pip install pandas numpy joblib scikit-learn scipy pyarrow fastparquet

        '
    - name: Build features (TARGET_SEASON)
      run: 'python scripts/02_build_features.py

        echo "---- features manifest ----"

        sed -n ''1,10p'' data/features/manifest.csv || true

        echo "---- features summary ----"

        sed -n ''1,40p'' data/features/_build_features_summary.txt || true

        '
    - name: Enrich features (optional)
      run: "if [ -f scripts/02b_enrich_features.py ]; then\n  python scripts/02b_enrich_features.py\n\
        else\n  echo \"No scripts/02b_enrich_features.py; skipping.\"\nfi\n"
    - name: Train models
      run: python scripts/03_train_models.py
    - name: Build models manifest (with metadata)
      run: python scripts/build_models_manifest.py
    - name: Validate manifest is populated
      run: "python - <<'PY'\nimport sys, pandas as pd, os\np = \"models/manifest/models_manifest.csv\"\
        \nif not os.path.exists(p):\n    print(f\"ERROR: {p} not found.\", file=sys.stderr);\
        \ sys.exit(1)\ndf = pd.read_csv(p)\nneed = [\"path\",\"filename\",\"sha256\"\
        ,\"target\",\"version_tag\"]\nmiss = [c for c in need if c not in df.columns]\n\
        if miss or df.empty or not df[\"target\"].fillna(\"\").str.len().gt(0).any():\n\
        \    print(\"ERROR: manifest invalid or empty.\", file=sys.stderr); sys.exit(1)\n\
        print(\"OK: manifest valid.\")\nPY\n"
    - name: Show key outputs
      run: 'sed -n ''1,25p'' output/models/metrics_summary.csv || true

        sed -n ''1,25p'' models/manifest/models_manifest.csv || true

        ls -lh models/pregame || true

        '
    - name: Remove legacy joblib stubs (prefer fresh timestamped models)
      run: "rm -f models/pregame/qb_passing_yards.joblib \\\n      models/pregame/rb_rushing_yards.joblib\
        \ \\\n      models/pregame/wr_rec_yards.joblib \\\n      models/pregame/wrte_receptions.joblib\
        \ || true\n"
    - name: Generate pregame predictions
      run: 'python scripts/04_predict_pregame.py --season ${TARGET_SEASON}

        echo "---- predictions written ----"

        ls -lh data/predictions/pregame || true

        '
    - name: Generate props (optional)
      run: "if [ -f scripts/04_generate_props.py ]; then\n  python scripts/04_generate_props.py\n\
        else\n  echo \"No scripts/04_generate_props.py; skipping.\"\nfi\n"
    - name: Season guard on props_current.csv (must be 2025)
      run: "set -e\nP=\"data/props/props_current.csv\"\nif [ ! -s \"$P\" ]; then\n\
        \  echo \"ERROR: $P missing or empty after generation\"; exit 1\nfi\npython\
        \ - <<'PY'\nimport os, pandas as pd, sys\nwant = int(os.getenv(\"TARGET_SEASON\"\
        ,\"2025\"))\np = \"data/props/props_current.csv\"\ndf = pd.read_csv(p)\nif\
        \ \"season\" not in df.columns:\n    print(\"ERROR: props_current.csv missing\
        \ 'season' column\", file=sys.stderr); sys.exit(1)\nmx = int(pd.to_numeric(df[\"\
        season\"], errors=\"coerce\").max())\nprint(\"props_current.csv max(season)=\"\
        , mx)\nif mx != want:\n    print(f\"ERROR: props_current.csv is season {mx},\
        \ not {want}.\", file=sys.stderr)\n    sys.exit(1)\nPY\n"
    - name: Show props outputs
      run: "ls -lh data/props || true\nsed -n '1,20p' data/props/props_current.csv\
        \ 2>/dev/null || true\nfor f in data/props/props_*.csv; do\n  [ -f \"$f\"\
        \ ] && echo \"---- $f ----\" && sed -n '1,5p' \"$f\";\ndone\n"
    - name: Verify historical outcomes present
      run: "set -e\nif [ ! -s \"data/props/history_props_with_outcomes.csv\" ]; then\n\
        \  echo \"ERROR: data/props/history_props_with_outcomes.csv missing or empty.\
        \ Run finalize-props first.\"; exit 1\nfi\n"
    - name: Train calibrators
      run: "set -e\npython scripts/05_train_calibrator.py \\\n  --csv \"data/props/history_props_with_outcomes.csv\"\
        \ \\\n  --method auto \\\n  --outdir \"models/calibration\"\nls -lh models/calibration\n\
        ls models/calibration/*.joblib >/dev/null 2>&1 || (echo \"ERROR: No calibrator\
        \ joblibs produced\"; exit 1)\n"
    - name: Apply calibrators
      run: "python scripts/06_apply_calibrator.py \\\n  --csv_in \"data/props/props_current.csv\"\
        \ \\\n  --csv_out \"data/props/props_current_calibrated.csv\" \\\n  --calib_dir\
        \ \"models/calibration\"\n"
    - name: Season guard on props_current_calibrated.csv (must be 2025)
      run: "set -e\nP=\"data/props/props_current_calibrated.csv\"\nif [ ! -s \"$P\"\
        \ ]; then\n  echo \"ERROR: $P not found after apply.\"; exit 1\nfi\npython\
        \ - <<'PY'\nimport os, pandas as pd, sys\nwant = int(os.getenv(\"TARGET_SEASON\"\
        ,\"2025\"))\np = \"data/props/props_current_calibrated.csv\"\ndf = pd.read_csv(p)\n\
        mx = int(pd.to_numeric(df[\"season\"], errors=\"coerce\").max())\nprint(\"\
        props_current_calibrated.csv max(season)=\", mx)\nif mx != want:\n  print(f\"\
        ERROR: props_current_calibrated.csv season {mx} != {want}.\", file=sys.stderr);\
        \ sys.exit(1)\nPY\n"
    - name: Ensure .gitignore excludes joblibs
      run: "if [ -f .gitignore ]; then\n  grep -q \"^models/pregame/.*\\.joblib$\"\
        \ .gitignore || echo \"models/pregame/*.joblib\" >> .gitignore\n  grep -q\
        \ \"^models/calibration/.*\\.joblib$\" .gitignore || echo \"models/calibration/*.joblib\"\
        \ >> .gitignore\nelse\n  printf \"models/pregame/*.joblib\\nmodels/calibration/*.joblib\\\
        n\" > .gitignore\nfi\n"
    - name: Commit calibration summary + calibrated props + manifest/metrics/logs
      run: "set -e\ngit config user.name  \"github-actions\"\ngit config user.email\
        \ \"github-actions@users.noreply.github.com\"\ngit add .gitignore models/manifest/*\
        \               2>/dev/null || true\ngit add output/models/metrics_summary.csv\
        \          2>/dev/null || true\ngit add output/logs/*.log                \
        \          2>/dev/null || true\ngit add models/calibration/calibration_summary.csv\
        \ 2>/dev/null || true\ngit add data/props/props_current_calibrated.csv   \
        \ 2>/dev/null || true\nif ! git diff --cached --quiet; then\n  git commit\
        \ -m \"Pipeline ${{ github.run_id }}: calibration summary + calibrated props\
        \ + manifest/metrics/logs (season ${TARGET_SEASON})\"\n  git fetch origin\
        \ main || true\n  git pull --rebase --autostash origin main || true\n  git\
        \ push\nelse:\n  echo \"No lightweight changes to commit.\"\nfi\n"
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-train-commit-${{ github.run_id }}
        path: 'models/pregame/*.joblib

          models/calibration/*.joblib

          data/props/props_current.csv

          data/props/props_current_calibrated.csv

          '
        if-no-files-found: warn
        retention-days: 90
  train:
    env:
      TARGET_SEASON: '2025'
