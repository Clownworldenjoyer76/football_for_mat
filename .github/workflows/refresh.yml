name: Weekly Data Refresh (2025-locked, robust)

on:
  schedule:
    - cron: "0 17 * * 2"   # 17:00 UTC = 12:00 PM ET (Tuesday)
  workflow_dispatch:
    inputs:
      season:
        description: "Season context (e.g., 2025)"
        required: false
        default: "2025"

permissions:
  contents: write

jobs:
  refresh-data:
    runs-on: ubuntu-latest
    env:
      TARGET_SEASON: ${{ github.event_name == 'workflow_dispatch' && inputs.season || '2025' }}
      PYTHONUTF8: "1"
      TZ: "UTC"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # -------- R: pull weekly for TARGET_SEASON via nflreadr (authoritative) --------
      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.3.3'

      - name: Install R deps
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          packages: |
            any::nflreadr
            any::readr
            any::dplyr

      - name: Fetch weekly player stats for TARGET_SEASON
        run: |
          set -e
          Rscript - <<'RSCRIPT'
          suppressPackageStartupMessages({
            library(nflreadr)
            library(readr)
            library(dplyr)
          })
          dir.create("data/raw/nflverse", recursive = TRUE, showWarnings = FALSE)
          seas <- as.integer(Sys.getenv("TARGET_SEASON", "2025"))
          wk <- nflreadr::load_player_stats(seasons = seas)
          if (nrow(wk) == 0) stop(paste("No weekly rows returned for season", seas))
          out_csv <- file.path("data/raw/nflverse","weekly_latest.csv")
          readr::write_csv(wk, out_csv)
          cat("Wrote:", out_csv, "rows:", nrow(wk), "\n")
          RSCRIPT
          gzip -f data/raw/nflverse/weekly_latest.csv
          ls -lh data/raw/nflverse/weekly_latest.csv.gz

      # -------- Build canonical weekly/latest.csv from nflreadr output (no repo script) --------
      - name: Build data/weekly/latest.csv
        run: |
          set -e
          mkdir -p data/weekly
          SRC="data/raw/nflverse/weekly_latest.csv.gz"
          [ -s "$SRC" ] || { echo "ERROR: $SRC not found"; exit 1; }
          zcat "$SRC" > data/weekly/latest.csv
          echo "âœ“ Wrote data/weekly/latest.csv"
          sed -n '1,20p' data/weekly/latest.csv || true

      # -------- Verify season/week coverage (HARD-FAIL if not TARGET_SEASON) --------
      - name: Verify data/weekly/latest.csv is for TARGET_SEASON
        run: |
          set -e
          python - <<'PY'
          import os, sys, pandas as pd
          want = int(os.getenv("TARGET_SEASON","2025"))
          p = "data/weekly/latest.csv"
          if not os.path.exists(p): 
              print(f"ERROR: {p} missing", file=sys.stderr); sys.exit(1)
          df = pd.read_csv(p)
          for col in ("season","week"):
              if col not in df.columns:
                  print(f"ERROR: {p} missing '{col}' column", file=sys.stderr); sys.exit(1)
          mx = int(pd.to_numeric(df["season"], errors="coerce").max())
          by = df.groupby("season")["week"].max().to_dict()
          print("max(season)=", mx, "max week per season=", {int(k): int(v) for k,v in by.items()})
          if mx != want:
              print(f"ERROR: {p} max(season)={mx} != {want}.", file=sys.stderr); sys.exit(1)
          PY

      # -------- Commit & push --------
      - name: Commit & push updated data
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git add -f data/raw/nflverse/weekly_latest.csv.gz 2>/dev/null || true
          git add -f data/weekly/latest.csv                  2>/dev/null || true

          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          git commit -m "refresh: weekly data (TARGET_SEASON=${TARGET_SEASON})"
          git fetch origin main || true
          git pull --rebase --autostash origin main || true
          git push origin HEAD:main
