name: NFL Props Pipeline

on:
  workflow_dispatch:
    inputs:
      pull_odds:
        description: "Pull odds via API (if script present)? 1=yes, 0=no"
        required: true
        default: "0"
      forecast_season:
        description: "Pregame season (e.g., 2025) — leave blank to skip"
        required: false
        default: ""
      forecast_week:
        description: "Pregame week (e.g., 1) — leave blank to skip"
        required: false
        default: ""

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: America/New_York
      PULL_ODDS: ${{ github.event.inputs.pull_odds }}
      FORECAST_SEASON: ${{ github.event.inputs.forecast_season }}
      FORECAST_WEEK: ${{ github.event.inputs.forecast_week }}
      RUN_ID: ${{ github.run_id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Ensure output folders exist
        run: |
          mkdir -p output/logs
          mkdir -p output/models
          mkdir -p output/predictions/pregame
          mkdir -p data/predictions/pregame
          mkdir -p models/pregame
          mkdir -p models/manifest

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pandas numpy nfl_data_py scikit-learn lightgbm xgboost scipy pyarrow pyyaml requests fastparquet joblib lxml html5lib
          fi
          echo "Deps installed OK" | tee -a output/logs/step_install.log

      # --- OPTIONAL ROSTERS VIA R (only if roster not present) ---
      - name: Set up R (only if roster not present)
        if: ${{ hashFiles('data/raw/nflverse/rosters_latest.csv.gz') == '' }}
        uses: r-lib/actions/setup-r@v2

      - name: Set up R dependencies (only if roster not present)
        if: ${{ hashFiles('data/raw/nflverse/rosters_latest.csv.gz') == '' }}
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          packages: |
            any::remotes
            any::nflreadr

      - name: Pull rosters via nflreadr (only if roster not present)
        if: ${{ hashFiles('data/raw/nflverse/rosters_latest.csv.gz') == '' }}
        run: |
          Rscript -e "yrs <- 2024:as.integer(format(Sys.Date(), '%Y'));
                      df <- nflreadr::load_rosters(yrs);
                      dir.create('data/raw/nflverse', recursive=TRUE, showWarnings=FALSE);
                      fn <- 'data/raw/nflverse/rosters_latest.csv.gz';
                      write.csv(df, gzfile(fn), row.names=FALSE)"

      # ===== Step 01: Pull & Canonicalize =====
      - name: Step 01 (Pull NFL data and canonicalize)
        run: |
          YEND=$(date +%Y)
          if [ -f scripts/01_pull_nflverse.py ]; then
            python scripts/01_pull_nflverse.py --start 2024 --end "$YEND" 2>&1 | tee -a output/logs/step01.log
          elif [ -f scripts/01_pull_nflverse_chunked.py ]; then
            python scripts/01_pull_nflverse_chunked.py --start 2024 --end "$YEND" --chunk-years 2 2>&1 | tee -a output/logs/step01.log
          else
            echo "ERROR: no Step 01 script found" | tee -a output/logs/step01.log
            exit 1
          fi

      - name: Finalize weekly/rosters tiny artifacts (no network)
        run: |
          python - <<'PY' 2>&1 | tee -a output/logs/step01_finalize.log
          import runpy
          g = runpy.run_path('scripts/01_pull_nflverse.py')
          if 'weekly_canonicalize' in g: g['weekly_canonicalize']()
          if 'rosters_canonicalize' in g: g['rosters_canonicalize']()
          PY

      # ===== Step 02: Build Features =====
      - name: Step 02 (Build features)
        run: |
          if [ -f scripts/02_build_features.py ]; then
            python scripts/02_build_features.py 2>&1 | tee -a output/logs/step02.log
          else
            echo "ERROR: scripts/02_build_features.py not found" | tee -a output/logs/step02.log
            exit 1
          fi

      # ===== Step 02.5: Debug features =====
      - name: Step 02.5 (Debug features)
        run: |
          if [ -f scripts/00_debug_features.py ]; then
            python scripts/00_debug_features.py 2>&1 | tee -a output/logs/step02_5_debug.log
          fi

      # ===== Step 02.6: Enrich features =====
      - name: Step 02.6 (Enrich features)
        run: |
          if [ -f scripts/02b_enrich_features.py ]; then
            python scripts/02b_enrich_features.py 2>&1 | tee -a output/logs/step02b_enrich.log
          else
            echo "WARN: scripts/02b_enrich_features.py not found — skipping enrichment" | tee -a output/logs/step02b_enrich.log
          fi

      # ===== Step 03: Train Models =====
      - name: Step 03 (Train models)
        run: |
          if [ -f scripts/03_train_models.py ]; then
            python scripts/03_train_models.py 2>&1 | tee -a output/logs/step03.log
          else
            echo "ERROR: scripts/03_train_models.py not found" | tee -a output/logs/step03.log
            exit 1
          fi

      # ===== Step 03.5: Build models manifest =====
      - name: Step 03.5 (Build models manifest)
        run: |
          if [ -f scripts/build_models_manifest.py ]; then
            python scripts/build_models_manifest.py 2>&1 | tee -a output/logs/step_manifest.log
          else
            echo "WARN: scripts/build_models_manifest.py not found — skipping manifest" | tee -a output/logs/step_manifest.log
          fi

      # ===== Step 04: Pregame Predictions (optional) =====
      - name: Step 04 (Predict pregame)
        env:
          FORECAST_SEASON: ${{ env.FORECAST_SEASON }}
          FORECAST_WEEK: ${{ env.FORECAST_WEEK }}
        run: |
          if [ -f scripts/04_predict_pregame.py ]; then
            python scripts/04_predict_pregame.py 2>&1 | tee -a output/logs/step04.log
          else
            echo "WARN: scripts/04_predict_pregame.py not found — skipping predictions" | tee -a output/logs/step04.log
          fi

      # ===== Upload artifacts (models kept out of Git) =====
      - name: Upload models (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: models-pregame
          if-no-files-found: warn
          path: |
            models/pregame/*.joblib
            !models/pregame/*.latest.joblib

      - name: Upload logs bundle (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-logs
          if-no-files-found: ignore
          path: |
            output/logs/*.log
            output/logs/*.txt
            output/logs/*.json

      # ===== Commit only lightweight outputs to repo =====
      - name: Commit outputs to repo (always)
        if: always()
        env:
          GH_USER_NAME: "github-actions[bot]"
          GH_USER_EMAIL: "github-actions[bot]@users.noreply.github.com"
        run: |
          set -e
          git config user.name "$GH_USER_NAME"
          git config user.email "$GH_USER_EMAIL"

          # Manifest + metrics + logs (no .joblib binaries)
          git add -A -f models/manifest/models_manifest.csv
          git add -A -f models/manifest/models_manifest.lock.json
          git add -A -f output/models/metrics_summary.csv
          git add -A -f output/logs/step*.log
          git add -A -f output/logs/features_columns.txt
          git add -A -f output/logs/targets_suggestions.json || true
          git add -A -f output/logs/step02b_enrich.log || true

          if ! git diff --staged --quiet; then
            git commit -m "Pipeline ${RUN_ID}: manifest, metrics, logs (with enriched features)"
            git push origin ${{ github.ref_name }}
            echo "Committed lightweight outputs."
          else
            echo "No changes to commit."
          fi
