name: Build • Train • Manifest • Commit

on:
  workflow_dispatch:
  schedule:
    - cron: "15 5 * * *"  # daily 05:15 UTC (~01:15 ET)

permissions:
  contents: write

env:
  PYTHON_VERSION: "3.10"
  MODELS_DIR: models/pregame
  FEATURES_FILE: data/features/weekly_clean.csv.gz
  METRICS_FILE: output/models/metrics_summary.csv
  MANIFEST_CSV: models/manifest/models_manifest.csv
  MANIFEST_LOCK: models/manifest/models_manifest.lock.json

jobs:
  build-train-commit:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 1) Build features (02 + 02b)
      - name: Build base features
        run: python -u scripts/02_build_features.py

      - name: Enrich features (02b)
        run: |
          if [ -f scripts/02b_enrich_features.py ]; then
            python -u scripts/02b_enrich_features.py
          else
            echo "[WARN] scripts/02b_enrich_features.py missing; continuing"
          fi

      - name: Assert features exist
        run: |
          test -f "${{ env.FEATURES_FILE }}" || (echo "::error::Features file missing: ${{ env.FEATURES_FILE }}" && exit 1)
          python - << 'PY'
import gzip, csv
p = "${{ env.FEATURES_FILE }}"
with gzip.open(p, 'rt', newline='') as f:
    r = csv.reader(f)
    hdr = next(r, [])
    print(f"[INFO] features columns: {len(hdr)}")
    assert len(hdr) >= 50, "Too few feature columns"
PY

      # 2) Train models
      - name: Train models (03)
        env:
          MODELS_DIR: ${{ env.MODELS_DIR }}
        run: |
          python -u scripts/03_train_models.py
          ls -lh "${{ env.MODELS_DIR }}" | sed -n '1,200p'

      # 3) Sanity-check training produced artifacts
      - name: Require models present
        run: |
          cnt=$(ls -1 "${{ env.MODELS_DIR }}"/*.joblib 2>/dev/null | wc -l || true)
          echo "[INFO] joblibs found: $cnt"
          if [ "$cnt" -lt 4 ]; then
            echo "::error::No trained artifacts (or too few) in ${{ env.MODELS_DIR }}"
            exit 1
          fi

      - name: Require metrics present
        run: |
          test -f "${{ env.METRICS_FILE }}" || (echo "::error::Missing ${{ env.METRICS_FILE }}" && exit 1)
          lines=$(wc -l < "${{ env.METRICS_FILE }}")
          echo "[INFO] metrics rows: $lines"
          if [ "$lines" -lt 2 ]; then
            echo "::error::Empty metrics_summary.csv"
            exit 1
          fi
          awk -F',' 'NR>1 && ($8=="" || $9=="") {bad++} END{ if(bad>0){printf("::warning::%d rows missing metrics\n",bad)} }' "${{ env.METRICS_FILE }}"

      # 4) Build manifest with full metadata
      - name: Build models manifest w/ metadata
        run: |
          python -u scripts/build_models_manifest.py \
            --models-dir "${{ env.MODELS_DIR }}" \
            --features-file "${{ env.FEATURES_FILE }}"

      - name: Show manifest summary
        run: |
          head -n 40 "${{ env.MANIFEST_CSV }}" || true
          cat "${{ env.MANIFEST_LOCK }}" || true

      # 5) Guard: ensure manifest has targets populated
      - name: Validate manifest completeness
        run: |
          awk -F',' 'NR>1 && $6!="" {ok++} END { if(ok<4){print "::error::manifest has too few populated targets"; exit 1} }' "${{ env.MANIFEST_CSV }}"

      # 6) Commit ONLY if there are changes
      - name: Commit models + manifest + metrics if changed
        run: |
          git config user.name  "github-actions"
          git config user.email "actions@github.com"
          git add "${{ env.MODELS_DIR }}"/*.joblib \
                  "${{ env.MANIFEST_CSV }}" \
                  "${{ env.MANIFEST_LOCK }}" \
                  "${{ env.METRICS_FILE }}"
          if git diff --cached --quiet; then
            echo "[INFO] No changes to commit."
          else
            git commit -m "ci: train + manifest update ($(date -u +%Y-%m-%dT%H:%M:%SZ))"
            git push
          fi
