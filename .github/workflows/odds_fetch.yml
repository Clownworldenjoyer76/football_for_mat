name: odds_fetch

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  fetch:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      TARGET_SEASON: '2025'
      REGIONS: 'us'
      BOOKS: 'draftkings,fanduel,betmgm,caesars,espnbet,bet365,pointsbet,betway'
      # Featured markets only (valid for /sports/{sport}/odds)
      FEATURED_MARKETS: 'h2h,spreads,totals'
      # Limit how many events we pull player props for (to save tokens)
      ODDS_MAX_EVENTS: '2'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          python - <<'PY'
          import importlib, subprocess, sys
          for pkg in ("pandas","requests"):
              try: importlib.import_module(pkg)
              except Exception: subprocess.check_call([sys.executable,"-m","pip","install",pkg])
          PY

      # Try to rebuild props from any previously cached player_* JSON (no API calls)
      - name: Try rebuild props from cache
        run: python scripts/01b_build_props_from_cache.py

      - name: Check if cache produced rows
        id: cachecheck
        run: |
          python - <<'PY'
          import os, pandas as pd, sys
          p = "data/props/props_current.csv"
          rows = 0
          if os.path.exists(p):
              try: rows = len(pd.read_csv(p))
              except Exception: rows = 0
          print("rows=", rows)
          # Set an output flag for later steps
          print(f"cache_rows={rows}")
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
              f.write(f"cache_rows={rows}\n")
          PY

      # If cache did not yield rows, do a lightweight FEATURED fetch (no player props)
      - name: Fetch raw odds/props (featured only)
        if: steps.cachecheck.outputs.cache_rows == '0'
        env:
          ODDS_API_KEY: ${{ secrets.ODDS_API_KEY }}
          ODDS_MODE: 'featured'
          ODDS_REGIONS: ${{ env.REGIONS }}
          ODDS_BOOKS: ${{ env.BOOKS }}
          ODDS_MARKETS: ${{ env.FEATURED_MARKETS }}
        run: python scripts/01_fetch_odds.py

      # If still no rows, do a VERY LIMITED player-props fetch (few events to save tokens)
      - name: Fetch raw player props (limited events)
        if: steps.cachecheck.outputs.cache_rows == '0'
        env:
          ODDS_API_KEY: ${{ secrets.ODDS_API_KEY }}
          ODDS_MODE: 'players'
          ODDS_REGIONS: ${{ env.REGIONS }}
          ODDS_BOOKS: ${{ env.BOOKS }}
          ODDS_MAX_EVENTS: ${{ env.ODDS_MAX_EVENTS }}
        run: python scripts/01_fetch_odds.py

      # Rebuild props_current.csv again now that we may have player_raw_*.json
      - name: Rebuild props from cache (post-fetch)
        run: python scripts/01b_build_props_from_cache.py

      - name: Verify props_current.csv exists
        run: test -s data/props/props_current.csv

      - name: Guard - must contain TARGET_SEASON in props_current.csv
        run: |
          python - <<'PY'
          import sys, pandas as pd
          df = pd.read_csv("data/props/props_current.csv")
          seas = sorted(set(pd.to_numeric(df.get("season"), errors="coerce").dropna().astype(int)))
          print("Seasons present:", seas)
          if 2025 not in seas:
              sys.exit("ERROR: TARGET_SEASON 2025 not found in props_current.csv")
          PY

      - name: Configure git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Commit refreshed props_current (only if changed)
        run: |
          git add data/props/props_current.csv -f || true
          git commit -m "[odds] refresh props_current" || true
          git push || true
