name: NFL Props Pipeline

on:
  workflow_dispatch:
    inputs:
      pull_odds:
        description: "Pull odds via API (if script present)? 1=yes, 0=no"
        required: true
        default: "0"
      forecast_season:
        description: "Pregame season (e.g., 2025) — leave blank to skip"
        required: false
        default: ""
      forecast_week:
        description: "Pregame week (e.g., 1) — leave blank to skip"
        required: false
        default: ""

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: America/New_York
      PULL_ODDS: ${{ github.event.inputs.pull_odds }}
      FORECAST_SEASON: ${{ github.event.inputs.forecast_season }}
      FORECAST_WEEK: ${{ github.event.inputs.forecast_week }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pandas numpy nfl_data_py scikit-learn lightgbm scipy requests joblib lxml html5lib
          fi

      # --- Detect & back up pre-seeded roster (e.g., Sleeper) ---
      - name: Detect and back up existing roster
        run: |
          mkdir -p tmp
          if [ -f data/raw/nflverse/rosters_latest.csv.gz ]; then
            echo "HAVE_SEEDED_ROSTER=1" >> $GITHUB_ENV
            cp -f data/raw/nflverse/rosters_latest.csv.gz tmp/rosters_latest.seed.gz
            echo "Found pre-seeded roster; backed up to tmp/rosters_latest.seed.gz"
          else
            echo "HAVE_SEEDED_ROSTER=0" >> $GITHUB_ENV
            echo "No pre-seeded roster detected"
          fi

      # ===== Core pipeline (restricted to 2024 → current year) =====
      - name: Step 01 (Pull NFL data, 2024+)
        run: |
          YEND=$(date +%Y)
          if [ -f scripts/01_pull_nflverse_chunked.py ]; then
            python scripts/01_pull_nflverse_chunked.py --start 2024 --end "$YEND" --chunk-years 2
          elif [ -f scripts/01_pull_nflverse.py ]; then
            python scripts/01_pull_nflverse.py --start 2024 --end "$YEND"
          else
            echo "ERROR: no Step 01 script found" && exit 1
          fi

      - name: Step 01b (Pull NGS - optional)
        run: |
          if [ -f scripts/01_pull_ngs.py ]; then
            python scripts/01_pull_ngs.py
          else
            echo "skip: scripts/01_pull_ngs.py not found"
          fi

      # --- R setup & rosters (skip entirely if we already have a roster file) ---
      - name: Set up R
        if: ${{ hashFiles('data/raw/nflverse/rosters_latest.csv.gz') == '' }}
        uses: r-lib/actions/setup-r@v2

      - name: Set up R dependencies
        if: ${{ hashFiles('data/raw/nflverse/rosters_latest.csv.gz') == '' }}
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          packages: |
            any::remotes
            any::nflreadr

      - name: Pull rosters via nflreadr (R) — latest only (2024+)
        if: ${{ hashFiles('data/raw/nflverse/rosters_latest.csv.gz') == '' }}
        run: |
          Rscript -e "yrs <- 2024:as.integer(format(Sys.Date(), '%Y'));
                      df <- nflreadr::load_rosters(yrs);
                      dir.create('data/raw/nflverse', recursive=TRUE, showWarnings=FALSE);
                      fn <- 'data/raw/nflverse/rosters_latest.csv.gz';
                      write.csv(df, gzfile(fn), row.names=FALSE)"

      # --- Restore pre-seeded roster if Step 01/R changed it ---
      - name: Restore pre-seeded roster (if backed up)
        if: ${{ env.HAVE_SEEDED_ROSTER == '1' }}
        run: |
          if [ -f tmp/rosters_latest.seed.gz ]; then
            cp -f tmp/rosters_latest.seed.gz data/raw/nflverse/rosters_latest.csv.gz
            echo "Restored pre-seeded roster after data pulls."
          fi

      # ===== Day-of freshness =====
      # (Injuries scraping step removed; rely on CSV if present)

      - name: Pull game weather (Open-Meteo)
        run: |
          if [ -n "${{ env.FORECAST_SEASON }}" ] && [ -n "${{ env.FORECAST_WEEK }}" ]; then
            python scripts/pull_weather_openmeteo.py --season ${{ env.FORECAST_SEASON }} --week ${{ env.FORECAST_WEEK }}
          elif [ -n "${{ env.FORECAST_SEASON }}" ]; then
            python scripts/pull_weather_openmeteo.py --season ${{ env.FORECAST_SEASON }}
          else
            python scripts/pull_weather_openmeteo.py
          fi

      - name: Upload raw snapshot (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: nflverse-raw-${{ github.run_id }}
          path: |
            data/raw/nflverse/weekly_*.csv.gz
            data/raw/nflverse/pbp_*.csv.gz
            data/raw/nflverse/rosters_latest.csv.gz
            data/raw/nflverse/schedules_*.csv.gz
            data/raw/nflverse/manifest_latest.csv.gz
            data/raw/nflverse/pbp_latest.head100.csv.gz
            data/raw/injuries/injury_reports_latest.csv
            data/raw/weather/game_weather_latest.csv
            data/raw/ngs/nextgen_stats.csv.gz
            data/raw/ngs/ngs.parquet
            data/raw/ngs/ngs_latest.head100.csv.gz
            data/raw/ngs/manifest_latest.csv.gz

      - name: Step 02 (Build features)
        run: |
          if [ -f scripts/02_build_features.py ]; then
            python scripts/02_build_features.py
          else
            echo "ERROR: scripts/02_build_features.py not found" && exit 1
          fi

      - name: Debug — features summary
        run: |
          [ -f data/features/_build_features_summary.txt ] && sed -n '1,200p' data/features/_build_features_summary.txt || echo "no summary"

      - name: Step 03 (Train models)
        run: |
          if [ -f scripts/03_train_models.py ]; then
            python scripts/03_train_models.py
          else
            echo "skip: scripts/03_train_models.py not found"
          fi

      - name: Step 04 (Generate props)
        run: |
          if [ -f scripts/04_generate_props.py ]; then
            python scripts/04_generate_props.py
          else
            echo "ERROR: scripts/04_generate_props.py not found" && exit 1
          fi

      - name: Step 05 (Rank edges - no odds)
        run: |
          if [ -f scripts/05_rank_edges_no_odds.py ]; then
            python scripts/05_rank_edges_no_odds.py
          else
            echo "skip: scripts/05_rank_edges_no_odds.py not found"
          fi

      # ===== Game projections (post-game) =====
      - name: G1 (Build game features)
        run: |
          if [ -f scripts/G1_build_game_features.py ]; then
            python scripts/G1_build_game_features.py
          else
            echo "skip: scripts/G1_build_game_features.py not found"
          fi

      - name: G2 (Predict games)
        run: |
          if [ -f scripts/G2_predict_games.py ]; then
            python scripts/G2_predict_games.py
          else
            echo "skip: scripts/G2_predict_games.py not found"
          fi

      # ===== Pregame branch (optional) =====
      - name: PG0 (Build pregame rolling history)
        if: ${{ env.FORECAST_SEASON != '' && env.FORECAST_WEEK != '' }}
        run: |
          if [ -f scripts/PG0_prepare_history.py ]; then
            python scripts/PG0_prepare_history.py
          else
            echo "skip: scripts/PG0_prepare_history.py not found"
          fi

      - name: Debug — pregame history summary
        if: ${{ env.FORECAST_SEASON != '' && env.FORECAST_WEEK != '' }}
        run: |
          [ -f data/pregame/_history_summary.txt ] && sed -n '1,200p' data/pregame/_history_summary.txt || echo "no _history_summary.txt"

      - name: PG1 (Train pregame models)
        if: ${{ env.FORECAST_SEASON != '' && env.FORECAST_WEEK != '' }}
        run: |
          if [ -f scripts/PG1_train_models.py ]; then
            python scripts/PG1_train_models.py
          else
            echo "skip: scripts/PG1_train_models.py not found"
          fi

      - name: PG2 (Predict pregame week)
        if: ${{ env.FORECAST_SEASON != '' && env.FORECAST_WEEK != '' }}
        run: |
          if [ -f scripts/PG2_predict_week.py ]; then
            python scripts/PG2_predict_week.py --season ${{ env.FORECAST_SEASON }} --week ${{ env.FORECAST_WEEK }}
          else
            echo "skip: scripts/PG2_predict_week.py not found"
          fi

      # ===== Odds (optional) =====
      - name: Step 06 (Pull odds via The Odds API)
        if: ${{ env.PULL_ODDS == '1' }}
        env:
          ODDS_API_KEY: ${{ secrets.ODDS_API_KEY }}
        run: |
          if [ -f scripts/06_pull_odds_api.py ]; then
            python scripts/06_pull_odds_api.py
          else
            echo "skip: scripts/06_pull_odds_api.py not found"
          fi

      - name: Debug — odds summary (if any)
        if: ${{ env.PULL_ODDS == '1' }}
        run: |
          [ -f data/odds/_api_summary.txt ] && sed -n '1,200p' data/odds/_api_summary.txt || echo "no _api_summary.txt"

      # ===== Commit artifacts =====
      - name: Commit outputs
        env:
          GH_USER_NAME: "github-actions[bot]"
          GH_USER_EMAIL: "github-actions[bot]@users.noreply.github.com"
        run: |
          set -e
          git config user.name "$GH_USER_NAME"
          git config user.email "$GH_USER_EMAIL"
          git pull --rebase origin main || true

          # Raw nflverse pulls
          git add -f data/raw/nflverse/weekly_*.csv.gz 2>/dev/null || true
          git add -f data/raw/nflverse/pbp_*.csv.gz 2>/dev/null || true
          git add -f data/raw/nflverse/rosters_latest.csv.gz 2>/dev/null || true
          git add -f data/raw/nflverse/schedules_*.csv.gz 2>/dev/null || true
          git add -f data/raw/nflverse/manifest_latest.csv.gz 2>/dev/null || true
          git add -f data/raw/nflverse/pbp_latest.head100.csv.gz 2>/dev/null || true

          # Raw NGS pulls
          git add -f data/raw/ngs/nextgen_stats.csv.gz 2>/dev/null || true
          git add -f data/raw/ngs/ngs.parquet 2>/dev/null || true
          git add -f data/raw/ngs/ngs_latest.head100.csv.gz 2>/dev/null || true
          git add -f data/raw/ngs/manifest_latest.csv.gz 2>/dev/null || true

          # Day-of freshness
          git add -f data/raw/injuries/injury_reports_latest.csv 2>/dev/null || true
          git add -f data/raw/weather/game_weather_latest.csv 2>/dev/null || true

          # Features
          git add -f data/features/*.parquet 2>/dev/null || true
          git add -f data/features/*.csv.gz 2>/dev/null || true
          git add -f data/features/manifest.csv 2>/dev/null || true
          git add -f data/features/_build_features_summary.txt 2>/dev/null || true

          # Predictions / Props
          git add -f data/predictions/*.csv 2>/dev/null || true
          git add -f data/props/*.csv 2>/dev/null || true

          # Edges
          git add -f data/edges/*.csv 2>/dev/null || true
          git add -f data/edges/*.csv.gz 2>/dev/null || true
          git add -f data/edges/*.preview.csv 2>/dev/null || true

          # Odds
          git add -f data/odds/*.csv 2>/dev/null || true
          git add -f data/odds/_api_summary.txt 2>/dev/null || true

          # Games
          git add -f data/games/*.csv 2>/dev/null || true

          # Pregame artifacts
          git add -f data/pregame/*.csv.gz 2>/dev/null || true
          git add -f models/pregame/*.joblib 2>/dev/null || true
          git add -f output/pregame_summary.txt 2>/dev/null || true

          # Output summaries
          git add -f output/*.csv 2>/dev/null || true
          git add -f output/*.json 2>/dev/null || true

          git diff --staged --quiet || git commit -m "Pipeline outputs (add optional NGS ingestion + tiny previews)"
          git push
